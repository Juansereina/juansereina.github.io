---
import type { CollectionEntry } from 'astro:content';
import Nav from '@/components/nav.astro';
import Footer from '@/components/footer.astro';
import { getLanguageFromURL } from '@/utils';

type MetaType = Partial<Omit<CollectionEntry<'blog'>['data'], 'publishedAt' | 'draft'>>;

export interface Props {
  meta?: MetaType;
}

const author = 'Juan Sebasti√°n Reina';
const defaultMeta = {
  title: author,
  description:
    'Web developer üë®‚Äçüíª passionate for coding, finance  üìö and investments üí∏',
  image: {
    src: 'https://ik.imagekit.io/juansereina/web/banner.png'
  },
  keywords: ['Web', 'Development', 'Front End', 'HTML', 'CSS', 'JavaScript'],
};

const { meta } = Astro.props;
const { pathname } = Astro.url;

const {
  title = defaultMeta.title,
  description = defaultMeta.description,
  image = defaultMeta.image,
  keywords = defaultMeta.keywords,
} = meta || defaultMeta;

const isExternalImage =
  image.src.startsWith('https://') || image.src.startsWith('http://');
const metaImage = isExternalImage ? image.src : new URL(image.src, Astro.site).href;

const canonicalURL = new URL(Astro.url).href;
const appleTouchIconURL = new URL('favicon/apple-touch-icon.png', Astro.site)
  .href;

const lang = getLanguageFromURL(pathname);
---

<!DOCTYPE html>
<html lang={lang}>
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.ico" />
    <link rel="manifest" href="/manifest.json" />
    <meta name="generator" content={Astro.generator} />

    <!-- Primary Meta Tags -->
    <title>{title}</title>
    <meta name="title" content={title} />
    <meta name="description" content={description} />
    <meta name="author" content={author} />
    <meta name="keywords" content={keywords.join(', ')} />
    <meta name="theme-color" content="#ffffff" />
    <link rel="apple-touch-icon" href={appleTouchIconURL} />

    <!-- Open Graph / Facebook -->
    <meta property="og:type" content="website" />
    <meta property="og:url" content={canonicalURL} />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:image" content={metaImage} />

    <!-- Twitter -->
    <meta property="twitter:card" content="summary_large_image" />
    <meta property="twitter:url" content={canonicalURL} />
    <meta property="twitter:title" content={title} />
    <meta property="twitter:description" content={description} />
    <meta property="twitter:image" content={metaImage} />

    <link rel="canonical" href={canonicalURL} />
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Roboto:ital,wght@0,100;0,300;0,400;0,500;0,700;0,900;1,100;1,300;1,400;1,500;1,700;1,900&display=swap"
    />
    <link
      rel="prefetch stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.3.0/css/all.min.css"
      crossorigin="anonymous"
      referrerPolicy="no-referrer"
      integrity="sha512-SzlrxWUlpfuzQ+pcUCosxcglQRNAq/DZjVsC0lE40xsADsfeQoEypE+enwcOiGjk/bSuGGKHEyjSoQ1zVisanQ=="
    />

    <!-- Google tag (gtag.js) -->
    <script
      defer
      type="text/partytown"
      src="https://www.googletagmanager.com/gtag/js?id=G-SESMVBDB29"
    ></script>
    <script async type="text/partytown">
      //@ts-ignore
      window.dataLayer = window.dataLayer || [];
      function gtag() {
        //@ts-ignore
        dataLayer.push(arguments);
      }
      //@ts-ignore
      gtag('js', new Date());

      //@ts-ignore
      gtag('config', 'G-SESMVBDB29');
    </script>
    <script>
      import { colorTheme, dark, light } from '@/utils/constants';

      const currentColorTheme = localStorage.getItem(colorTheme);
      const scheme = `(prefers-color-scheme: ${dark})`;
      const isDarkSysPreference = window.matchMedia(scheme).matches;
      const preferedDark = currentColorTheme === dark;
      const isDark = currentColorTheme ? preferedDark : isDarkSysPreference;

      document.documentElement.classList.toggle(dark, isDark);

      if (!currentColorTheme) {
        localStorage.setItem(colorTheme, isDarkSysPreference ? dark : light);
      }
    </script>
  </head>
  <body>
    <Nav />
    <div class="flex-1 flex flex-col">
      <slot />
    </div>
    <Footer />
  </body>
</html>
<style is:global>
  html {
    font-family: 'Roboto', system-ui, sans-serif;
  }

  body,
  dialog {
    @apply bg-neutral-50 dark:bg-gray-800 container mx-auto p-4 max-w-3xl min-h-screen flex flex-col text-zinc-700 dark:text-zinc-200 relative;
  }

  svg {
    @apply fill-zinc-600 dark:fill-zinc-300;
  }

  code {
    font-family: Menlo, Monaco, Lucida Console, Liberation Mono,
      DejaVu Sans Mono, Bitstream Vera Sans Mono, Courier New, monospace;
  }

  pre {
    @apply p-4 rounded;
  }

  p code {
    @apply text-zinc-900 dark:text-zinc-50 before:content-['`'] after:content-['`'];
  }

  p a code {
    @apply underline;
  }

  p a {
    @apply font-medium hover:underline;
  }

  p {
    @apply text-base sm:text-lg lg:sm:text-xl;
  }

  strong {
    @apply text-zinc-800 dark:text-zinc-50;
  }

  img {
    @apply rounded object-cover border dark:border-gray-600;
  }

  h1 {
    @apply text-2xl sm:text-4xl lg:text-5xl;
  }

  h2 {
    @apply text-xl sm:text-2xl lg:sm:text-3xl;
  }

  h3 {
    @apply text-lg sm:text-xl lg:sm:text-2xl;
  }

  h4 {
    @apply text-base sm:text-lg lg:sm:text-xl;
  }

  a {
    @apply underline-offset-2;
  }

  h2 a {
    @apply hover:underline;
  }

  h2 a:hover::after {
    content: ' #';
  }

  h2 a,
  p a, p a code {
    @apply decoration-orange-500 dark:decoration-cyan-300;
  }

  p > a {
    @apply text-orange-500 dark:text-cyan-300;
  }

  a * {
    @apply group-hover:decoration-orange-500 dark:group-hover:decoration-cyan-300;
  }

  small {
    @apply text-sm sm:text-base text-zinc-500 dark:text-zinc-300;
  }

  strong.gradient,
  .gradient {
    @apply text-transparent bg-clip-text bg-gradient-to-r from-orange-500 to-red-600 dark:from-sky-400 dark:to-cyan-300;
  }

  .general-border {
    @apply border dark:border-gray-600;
  }

  .border-hover {
    @apply hover:border-gray-400 hover:dark:border-white;
  }

  .projects-bg {
    @apply bg-gray-100 dark:bg-gray-700;
  }
</style>
